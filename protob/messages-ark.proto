syntax = "proto2";

// Sugar for easier handling in Java
option java_package = "com.satoshilabs.trezor.lib.protobuf";
option java_outer_classname = "TrezorMessageArk";

/**
 * Request: Ask device for Ark public key corresponding to address_n path
 * @next ArkPublicKey
*/
message ArkGetPublicKey {
    repeated uint32 address_n = 1;  // BIP-32 path to derive the key from master node
    optional bool show_display = 2; // Optionally show on display before sending the result
}

/**
 * Response: Contains Ark public key derived from device private seed
 * @prev ArkGetPublicKey
*/
message ArkPublicKey {
    optional bytes public_key = 1;  // Ark public key
}

/**
 * Request: Ask device for Ark address corresponding to address_n path
 * @next PassphraseRequest
 * @next ArkAddress
 * @next Failure
 */
message ArkGetAddress {
    repeated uint32 address_n = 1;  // BIP-32 path to derive the key from master node
    optional bool show_display = 2; // Optionally show on display before sending the result
}

/**
 * Response: Contains Ark address derived from device private seed
 * @prev ArkGetAddress
 */
message ArkAddress {
    optional string address = 1;    // Ark address
}

/**
 * Request: Ask device to sign Ark transaction
 * @next ArkSignedTx
 */
message ArkSignTx {
    repeated uint32 address_n = 1;                  // BIP-32 path to derive the key from master node
    optional ArkTransactionCommon transaction = 2; // Ark transaction structure
    /**
    * Structure representing the common part for Ark transactions
    */
    message ArkTransactionCommon {
        optional ArkTransactionType type = 1;
        optional uint64 amount = 2 [default=0];
        optional uint64 fee = 3;
        optional string recipient_id = 4;
        optional bytes sender_public_key = 5;
        optional bytes requester_public_key = 6;
        optional bytes signature = 7;
        optional uint32 timestamp = 8;
        optional ArkTransactionAsset asset = 9;
        /**
        * Type of Ark transaction
        */
        enum ArkTransactionType {
            Transfer = 0;
            RegisterSecondPassphrase = 1;
            RegisterDelegate = 2;
            CastVotes = 3;
            RegisterMultisignatureAccount = 4;
        }
        /**
        * Structure representing the asset field in the Ark transaction
        */
        message ArkTransactionAsset {
            optional ArkSignatureType signature = 1;
            optional ArkDelegateType delegate = 2;
            repeated string votes = 3;
            optional ArkMultisignatureType multisignature = 4;
            /**
            * Structure representing the signature field in the Ark transaction asset field
            */
            message ArkSignatureType {
                optional bytes public_key = 1;
            }
            /**
            * Structure representing the delegate field in the Ark transaction asset field
            */
            message ArkDelegateType {
                optional string username  = 1;
            }
            /**
            * Structure representing the multisignature field in the Ark transaction asset field
            */
            message ArkMultisignatureType {
                optional uint32 min = 1;
                optional uint32 life_time = 2;
                repeated string keys_group = 3;
            }
        }
    }
}

/**
* Response: Contains Ark transaction signature
* @prev ArkSignTx
*/
message ArkSignedTx {
    optional bytes signature = 1;
}
